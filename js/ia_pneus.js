// ===== IA - AN√ÅLISE INTELIGENTE DE PNEUS =====

// Analisar estado do pneu e gerar recomenda√ß√µes
function analisarPneuIA(pneu) {
    try {
        const analise = {
            status: 'bom',
            alertas: [],
            recomendacoes: [],
            prioridade: 'baixa'
        };
        
        // An√°lise de quilometragem
        const kmAtual = pneu.quilometragem || 0;
        const kmLimite = 80000; // Limite recomendado
        const kmCritico = 100000; // Limite cr√≠tico
        const kmAlerta = 60000; // Limite para alerta (verifica√ß√£o de sulco)
        
        if (kmAtual > kmCritico) {
            analise.status = 'critico';
            analise.alertas.push('üö® Pneu com quilometragem CR√çTICA!');
            analise.recomendacoes.push('Troca URGENTE recomendada');
            analise.prioridade = 'alta';
        } else if (kmAtual > kmLimite) {
            analise.status = 'critico';
            analise.alertas.push('üö® Pneu pr√≥ximo do limite de quilometragem');
            analise.recomendacoes.push('Troca IMEDIATA necess√°ria');
            analise.prioridade = 'alta';
        } else if (kmAtual > kmAlerta) {
            analise.status = 'alerta';
            analise.alertas.push('‚ö†Ô∏è Pneu necessita verifica√ß√£o de sulco');
            analise.recomendacoes.push('Verificar profundidade dos sulcos e calibra√ß√£o');
            analise.prioridade = 'media';
        }
        
        // An√°lise de idade (baseada no DOT)
        if (pneu.dot) {
            const anoDOT = parseInt(pneu.dot.substring(2, 4)) + 2000;
            const idade = new Date().getFullYear() - anoDOT;
            
            if (idade > 6) {
                analise.alertas.push('üìÖ Pneu com mais de 6 anos - verificar integridade');
                analise.recomendacoes.push('Considerar troca por idade');
                if (analise.prioridade === 'baixa') analise.prioridade = 'media';
            } else if (idade > 4) {
                analise.alertas.push('üìÖ Pneu com mais de 4 anos - verificar sulcos');
                analise.recomendacoes.push('Verificar profundidade dos sulcos');
                if (analise.status === 'bom') {
                    analise.status = 'alerta';
                    analise.prioridade = 'media';
                }
            }
        }
        
        // An√°lise de status
        const status = pneu.status_nome || '';
        if (status.includes('critico') || status.includes('furado')) {
            analise.status = 'critico';
            analise.alertas.push('üî¥ Pneu em estado CR√çTICO!');
            analise.recomendacoes.push('Troca IMEDIATA necess√°ria');
            analise.prioridade = 'alta';
        } else if (status.includes('gasto')) {
            analise.status = 'alerta';
            analise.alertas.push('üü° Pneu gasto - verificar sulcos');
            analise.recomendacoes.push('Verificar profundidade dos sulcos e planejar troca');
            analise.prioridade = 'media';
        } else if (status.includes('desgaste')) {
            analise.status = 'alerta';
            analise.alertas.push('üü° Pneu com desgaste - verificar calibra√ß√£o');
            analise.recomendacoes.push('Verificar press√£o e alinhamento');
            analise.prioridade = 'media';
        }
        
        // An√°lise de press√£o (simulada)
        const pressaoAtual = pneu.pressao || 32; // PSI
        const pressaoIdeal = 35; // PSI
        const pressaoMinima = 30; // PSI
        
        if (pressaoAtual < pressaoMinima) {
            analise.alertas.push('üí® Press√£o baixa - calibrar imediatamente');
            analise.recomendacoes.push('Calibrar pneu para press√£o ideal');
            if (analise.status === 'bom') {
                analise.status = 'alerta';
                analise.prioridade = 'media';
            }
        } else if (pressaoAtual < pressaoIdeal) {
            analise.alertas.push('üí® Press√£o abaixo do ideal - verificar calibra√ß√£o');
            analise.recomendacoes.push('Calibrar pneu para press√£o ideal');
            if (analise.status === 'bom') {
                analise.status = 'alerta';
                analise.prioridade = 'media';
            }
        }
        
        // An√°lise de custo-benef√≠cio
        const custoAcumulado = calcularCustoAcumulado(pneu);
        if (custoAcumulado > 2000) {
            analise.recomendacoes.push('üí∞ Alto custo acumulado - avaliar recapagem');
        }
        
        return analise;
    } catch (error) {
        console.error('Erro na an√°lise IA do pneu:', error);
        return { status: 'bom', alertas: [], recomendacoes: [], prioridade: 'baixa' };
    }
}

// Gerar notifica√ß√£o inteligente
function gerarNotificacaoIA(pneu, slotId) {
    try {
        const analise = analisarPneuIA(pneu);
        const notificacao = {
            titulo: '',
            mensagem: '',
            tipo: 'info',
            acoes: []
        };
        
        if (analise.status === 'critico') {
            notificacao.titulo = 'üö® ALERTA CR√çTICO - Pneu ' + pneu.numero_serie;
            notificacao.tipo = 'critico';
            notificacao.mensagem = analise.alertas.join('\n') + '\n\n' + analise.recomendacoes.join('\n');
            notificacao.acoes = ['Trocar Imediatamente', 'Agendar Manuten√ß√£o', 'Verificar Estoque'];
        } else if (analise.status === 'alerta') {
            notificacao.titulo = '‚ö†Ô∏è ALERTA - Pneu ' + pneu.numero_serie;
            notificacao.tipo = 'alerta';
            notificacao.mensagem = analise.alertas.join('\n') + '\n\n' + analise.recomendacoes.join('\n');
            notificacao.acoes = ['Verificar Sulcos', 'Calibrar Pneu', 'Verificar Alinhamento', 'Planejar Troca'];
        } else {
            notificacao.titulo = '‚úÖ Pneu ' + pneu.numero_serie + ' - Estado Bom';
            notificacao.tipo = 'sucesso';
            notificacao.mensagem = 'Pneu em bom estado. Continue monitorando o desgaste regularmente.';
            notificacao.acoes = ['Ver Detalhes', 'Hist√≥rico de Manuten√ß√£o'];
        }
        
        return notificacao;
    } catch (error) {
        console.error('Erro ao gerar notifica√ß√£o IA:', error);
        return { titulo: 'Erro', mensagem: 'Erro ao analisar pneu', tipo: 'erro', acoes: [] };
    }
}

// Mostrar notifica√ß√£o IA
function mostrarNotificacaoIA(pneu, slotId) {
    try {
        const notificacao = gerarNotificacaoIA(pneu, slotId);
        
        // Criar modal de notifica√ß√£o
        const modal = document.createElement('div');
        modal.className = 'modal-notificacao-ia';
        modal.innerHTML = `
            <div class="modal-content-ia ${notificacao.tipo}">
                <div class="modal-header-ia">
                    <h3>${notificacao.titulo}</h3>
                    <span class="close-ia" onclick="this.parentElement.parentElement.parentElement.remove()">&times;</span>
                </div>
                <div class="modal-body-ia">
                    <p>${notificacao.mensagem}</p>
                    <div class="acoes-ia">
                        ${notificacao.acoes.map(acao => `<button onclick="executarAcaoIA('${acao}', '${slotId}')">${acao}</button>`).join('')}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Auto-remover ap√≥s 10 segundos se n√£o for cr√≠tica
        if (notificacao.tipo !== 'critico') {
            setTimeout(() => {
                if (modal.parentElement) {
                    modal.remove();
                }
            }, 10000);
        }
    } catch (error) {
        console.error('Erro ao mostrar notifica√ß√£o IA:', error);
    }
}

// Executar a√ß√£o da IA
function executarAcaoIA(acao, slotId) {
    try {
        const pneu = window.pneusFlexAlocados ? window.pneusFlexAlocados[slotId] : null;
        
        switch(acao) {
            case 'Trocar Imediatamente':
                alert('A√ß√£o: Trocar pneu imediatamente\n\nPr√≥ximos passos:\n1. Remover pneu do ve√≠culo\n2. Verificar estoque de reposi√ß√£o\n3. Alocar novo pneu\n4. Registrar troca no sistema');
                break;
            case 'Agendar Manuten√ß√£o':
                alert('A√ß√£o: Agendar manuten√ß√£o\n\nPr√≥ximos passos:\n1. Verificar disponibilidade da oficina\n2. Agendar data e hor√°rio\n3. Preparar pneu de reposi√ß√£o\n4. Notificar motorista');
                break;
            case 'Verificar Estoque':
                alert('Verificando estoque de pneus compat√≠veis...');
                // Aqui voc√™ pode integrar com a API de estoque
                break;
            case 'Verificar Sulcos':
                alert('A√ß√£o: Verificar sulcos do pneu\n\nChecklist:\n1. Medir profundidade dos sulcos (m√≠nimo 1.6mm)\n2. Verificar desgaste irregular\n3. Observar sinais de alinhamento\n4. Documentar medi√ß√µes\n5. Registrar no sistema');
                break;
            case 'Calibrar Pneu':
                alert('A√ß√£o: Calibrar pneu\n\nPr√≥ximos passos:\n1. Verificar press√£o atual\n2. Calibrar para press√£o ideal (35 PSI)\n3. Verificar vazamentos\n4. Testar em movimento\n5. Registrar calibra√ß√£o');
                break;
            case 'Verificar Alinhamento':
                alert('A√ß√£o: Verificar alinhamento\n\nChecklist:\n1. Verificar desgaste irregular dos pneus\n2. Observar dire√ß√£o do ve√≠culo\n3. Testar em reta\n4. Agendar alinhamento se necess√°rio\n5. Documentar verifica√ß√£o');
                break;
            case 'Planejar Troca':
                alert('A√ß√£o: Planejar troca\n\nRecomenda√ß√µes:\n1. Monitorar desgaste semanalmente\n2. Preparar pneu de reposi√ß√£o\n3. Agendar troca para pr√≥xima manuten√ß√£o\n4. Documentar planejamento');
                break;
            case 'Monitorar Desgaste':
                alert('A√ß√£o: Monitorar desgaste\n\nChecklist:\n1. Verificar sulcos (m√≠nimo 1.6mm)\n2. Observar desgaste irregular\n3. Medir press√£o regularmente\n4. Registrar medi√ß√µes');
                break;
            case 'Verificar Hist√≥rico':
                alert('Hist√≥rico do pneu:\n\n' + buscarHistoricoPneu(pneu ? pneu.id : null));
                break;
            case 'Ver Detalhes':
                if (pneu) {
                    const detalhes = `
                        Pneu: ${pneu.numero_serie}
                        Marca: ${pneu.marca}
                        Modelo: ${pneu.modelo}
                        Medida: ${pneu.medida}
                        Status: ${pneu.status_nome || 'N/A'}
                        KM: ${pneu.quilometragem || 'N/A'}
                        DOT: ${pneu.dot || 'N/A'}
                        Press√£o: ${pneu.pressao || 'N/A'} PSI
                    `;
                    alert(detalhes);
                }
                break;
            case 'Hist√≥rico de Manuten√ß√£o':
                alert('Hist√≥rico de manuten√ß√£o:\n\n' + buscarHistoricoPneu(pneu ? pneu.id : null));
                break;
        }
        
        // Remover modal
        const modal = document.querySelector('.modal-notificacao-ia');
        if (modal) modal.remove();
    } catch (error) {
        console.error('Erro ao executar a√ß√£o IA:', error);
    }
}

// An√°lise preditiva de desgaste
function analisePreditivaDesgaste(pneu) {
    try {
        const kmAtual = pneu.quilometragem || 0;
        const kmPorMes = 5000; // Estimativa
        const kmRestante = 80000 - kmAtual;
        const mesesRestante = Math.floor(kmRestante / kmPorMes);
        
        return {
            kmRestante: kmRestante,
            mesesRestante: mesesRestante,
            recomendacao: mesesRestante <= 3 ? 'Troca Imediata' : 
                         mesesRestante <= 6 ? 'Planejar Troca' : 'Monitorar'
        };
    } catch (error) {
        console.error('Erro na an√°lise preditiva:', error);
        return { kmRestante: 0, mesesRestante: 0, recomendacao: 'Erro' };
    }
}

// Calcular custo acumulado do pneu
function calcularCustoAcumulado(pneu) {
    try {
        // Simular c√°lculo de custo baseado em quilometragem e manuten√ß√µes
        const kmAtual = pneu.quilometragem || 0;
        const custoPorKm = 0.05; // R$ 0,05 por km
        const custoManutencao = 500; // R$ 500 por manuten√ß√£o
        const manutencoesEstimadas = Math.floor(kmAtual / 40000); // Manuten√ß√£o a cada 40k km
        
        return (kmAtual * custoPorKm) + (manutencoesEstimadas * custoManutencao);
    } catch (error) {
        console.error('Erro ao calcular custo acumulado:', error);
        return 0;
    }
}

// Buscar hist√≥rico do pneu
function buscarHistoricoPneu(pneuId) {
    try {
        // Simular hist√≥rico do pneu
        return `Hist√≥rico do Pneu ${pneuId}:
        
üìÖ Instala√ß√µes:
- 15/01/2024: Instalado no ve√≠culo ABC-1234
- 10/03/2024: Manuten√ß√£o preventiva
- 25/05/2024: Verifica√ß√£o de sulcos

üîß Manuten√ß√µes:
- 10/03/2024: Alinhamento e balanceamento
- 25/05/2024: Verifica√ß√£o de press√£o

üí∞ Custos:
- Valor inicial: R$ 1.200,00
- Manuten√ß√µes: R$ 300,00
- Total acumulado: R$ 1.500,00

üìä Estat√≠sticas:
- KM total: 45.000 km
- Vida √∫til restante: ~35.000 km
- Desgaste m√©dio: 0,8mm/10.000 km`;
    } catch (error) {
        console.error('Erro ao buscar hist√≥rico:', error);
        return 'Erro ao carregar hist√≥rico';
    }
} 